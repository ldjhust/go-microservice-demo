// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/win5do/golang-microservice-demo/pkg/model/pet (interfaces: PetDomainInterface,PetDbInterface,OwnerDbInterface,Owner_PetDbInterface)

// Package mock_pet is a generated GoMock package.
package mock_pet

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pet "github.com/win5do/golang-microservice-demo/pkg/model/pet"
	reflect "reflect"
)

// MockPetDomainInterface is a mock of PetDomainInterface interface
type MockPetDomainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPetDomainInterfaceMockRecorder
}

// MockPetDomainInterfaceMockRecorder is the mock recorder for MockPetDomainInterface
type MockPetDomainInterfaceMockRecorder struct {
	mock *MockPetDomainInterface
}

// NewMockPetDomainInterface creates a new mock instance
func NewMockPetDomainInterface(ctrl *gomock.Controller) *MockPetDomainInterface {
	mock := &MockPetDomainInterface{ctrl: ctrl}
	mock.recorder = &MockPetDomainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPetDomainInterface) EXPECT() *MockPetDomainInterfaceMockRecorder {
	return m.recorder
}

// OwnerDb mocks base method
func (m *MockPetDomainInterface) OwnerDb(arg0 context.Context) pet.OwnerDbInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerDb", arg0)
	ret0, _ := ret[0].(pet.OwnerDbInterface)
	return ret0
}

// OwnerDb indicates an expected call of OwnerDb
func (mr *MockPetDomainInterfaceMockRecorder) OwnerDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerDb", reflect.TypeOf((*MockPetDomainInterface)(nil).OwnerDb), arg0)
}

// Owner_PetDb mocks base method
func (m *MockPetDomainInterface) Owner_PetDb(arg0 context.Context) pet.Owner_PetDbInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner_PetDb", arg0)
	ret0, _ := ret[0].(pet.Owner_PetDbInterface)
	return ret0
}

// Owner_PetDb indicates an expected call of Owner_PetDb
func (mr *MockPetDomainInterfaceMockRecorder) Owner_PetDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner_PetDb", reflect.TypeOf((*MockPetDomainInterface)(nil).Owner_PetDb), arg0)
}

// PetDb mocks base method
func (m *MockPetDomainInterface) PetDb(arg0 context.Context) pet.PetDbInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PetDb", arg0)
	ret0, _ := ret[0].(pet.PetDbInterface)
	return ret0
}

// PetDb indicates an expected call of PetDb
func (mr *MockPetDomainInterfaceMockRecorder) PetDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PetDb", reflect.TypeOf((*MockPetDomainInterface)(nil).PetDb), arg0)
}

// MockPetDbInterface is a mock of PetDbInterface interface
type MockPetDbInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPetDbInterfaceMockRecorder
}

// MockPetDbInterfaceMockRecorder is the mock recorder for MockPetDbInterface
type MockPetDbInterfaceMockRecorder struct {
	mock *MockPetDbInterface
}

// NewMockPetDbInterface creates a new mock instance
func NewMockPetDbInterface(ctrl *gomock.Controller) *MockPetDbInterface {
	mock := &MockPetDbInterface{ctrl: ctrl}
	mock.recorder = &MockPetDbInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPetDbInterface) EXPECT() *MockPetDbInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPetDbInterface) Create(arg0 *pet.Pet) (*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPetDbInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetDbInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockPetDbInterface) Delete(arg0 *pet.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPetDbInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetDbInterface)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockPetDbInterface) Get(arg0 string) (*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPetDbInterfaceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetDbInterface)(nil).Get), arg0)
}

// List mocks base method
func (m *MockPetDbInterface) List(arg0 *pet.Pet, arg1, arg2 int) ([]*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPetDbInterfaceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPetDbInterface)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockPetDbInterface) Update(arg0 *pet.Pet) (*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPetDbInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetDbInterface)(nil).Update), arg0)
}

// MockOwnerDbInterface is a mock of OwnerDbInterface interface
type MockOwnerDbInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerDbInterfaceMockRecorder
}

// MockOwnerDbInterfaceMockRecorder is the mock recorder for MockOwnerDbInterface
type MockOwnerDbInterfaceMockRecorder struct {
	mock *MockOwnerDbInterface
}

// NewMockOwnerDbInterface creates a new mock instance
func NewMockOwnerDbInterface(ctrl *gomock.Controller) *MockOwnerDbInterface {
	mock := &MockOwnerDbInterface{ctrl: ctrl}
	mock.recorder = &MockOwnerDbInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOwnerDbInterface) EXPECT() *MockOwnerDbInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOwnerDbInterface) Create(arg0 *pet.Owner) (*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOwnerDbInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOwnerDbInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockOwnerDbInterface) Delete(arg0 *pet.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOwnerDbInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOwnerDbInterface)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockOwnerDbInterface) Get(arg0 string) (*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOwnerDbInterfaceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOwnerDbInterface)(nil).Get), arg0)
}

// List mocks base method
func (m *MockOwnerDbInterface) List(arg0 *pet.Owner, arg1, arg2 int) ([]*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockOwnerDbInterfaceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOwnerDbInterface)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockOwnerDbInterface) Update(arg0 *pet.Owner) (*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockOwnerDbInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOwnerDbInterface)(nil).Update), arg0)
}

// MockOwner_PetDbInterface is a mock of Owner_PetDbInterface interface
type MockOwner_PetDbInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOwner_PetDbInterfaceMockRecorder
}

// MockOwner_PetDbInterfaceMockRecorder is the mock recorder for MockOwner_PetDbInterface
type MockOwner_PetDbInterfaceMockRecorder struct {
	mock *MockOwner_PetDbInterface
}

// NewMockOwner_PetDbInterface creates a new mock instance
func NewMockOwner_PetDbInterface(ctrl *gomock.Controller) *MockOwner_PetDbInterface {
	mock := &MockOwner_PetDbInterface{ctrl: ctrl}
	mock.recorder = &MockOwner_PetDbInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOwner_PetDbInterface) EXPECT() *MockOwner_PetDbInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOwner_PetDbInterface) Create(arg0 *pet.Owner_Pet) (*pet.Owner_Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*pet.Owner_Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOwner_PetDbInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOwner_PetDbInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockOwner_PetDbInterface) Delete(arg0 *pet.Owner_Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOwner_PetDbInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOwner_PetDbInterface)(nil).Delete), arg0)
}

// Query mocks base method
func (m *MockOwner_PetDbInterface) Query(arg0 *pet.Owner_Pet) ([]*pet.Owner_Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].([]*pet.Owner_Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockOwner_PetDbInterfaceMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOwner_PetDbInterface)(nil).Query), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/win5do/golang-microservice-demo/pkg/model/pet (interfaces: IPetDomain,IPetDb,IOwnerDb,IOwnerPetDb)

// Package mock_pet is a generated GoMock package.
package mock_pet

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pet "github.com/win5do/golang-microservice-demo/pkg/model/pet"
)

// MockIPetDomain is a mock of IPetDomain interface.
type MockIPetDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIPetDomainMockRecorder
}

// MockIPetDomainMockRecorder is the mock recorder for MockIPetDomain.
type MockIPetDomainMockRecorder struct {
	mock *MockIPetDomain
}

// NewMockIPetDomain creates a new mock instance.
func NewMockIPetDomain(ctrl *gomock.Controller) *MockIPetDomain {
	mock := &MockIPetDomain{ctrl: ctrl}
	mock.recorder = &MockIPetDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPetDomain) EXPECT() *MockIPetDomainMockRecorder {
	return m.recorder
}

// OwnerDb mocks base method.
func (m *MockIPetDomain) OwnerDb(arg0 context.Context) pet.IOwnerDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerDb", arg0)
	ret0, _ := ret[0].(pet.IOwnerDb)
	return ret0
}

// OwnerDb indicates an expected call of OwnerDb.
func (mr *MockIPetDomainMockRecorder) OwnerDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerDb", reflect.TypeOf((*MockIPetDomain)(nil).OwnerDb), arg0)
}

// OwnerPetDb mocks base method.
func (m *MockIPetDomain) OwnerPetDb(arg0 context.Context) pet.IOwnerPetDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerPetDb", arg0)
	ret0, _ := ret[0].(pet.IOwnerPetDb)
	return ret0
}

// OwnerPetDb indicates an expected call of OwnerPetDb.
func (mr *MockIPetDomainMockRecorder) OwnerPetDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerPetDb", reflect.TypeOf((*MockIPetDomain)(nil).OwnerPetDb), arg0)
}

// PetDb mocks base method.
func (m *MockIPetDomain) PetDb(arg0 context.Context) pet.IPetDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PetDb", arg0)
	ret0, _ := ret[0].(pet.IPetDb)
	return ret0
}

// PetDb indicates an expected call of PetDb.
func (mr *MockIPetDomainMockRecorder) PetDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PetDb", reflect.TypeOf((*MockIPetDomain)(nil).PetDb), arg0)
}

// MockIPetDb is a mock of IPetDb interface.
type MockIPetDb struct {
	ctrl     *gomock.Controller
	recorder *MockIPetDbMockRecorder
}

// MockIPetDbMockRecorder is the mock recorder for MockIPetDb.
type MockIPetDbMockRecorder struct {
	mock *MockIPetDb
}

// NewMockIPetDb creates a new mock instance.
func NewMockIPetDb(ctrl *gomock.Controller) *MockIPetDb {
	mock := &MockIPetDb{ctrl: ctrl}
	mock.recorder = &MockIPetDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPetDb) EXPECT() *MockIPetDbMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPetDb) Create(arg0 *pet.Pet) (*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPetDbMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPetDb)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIPetDb) Delete(arg0 *pet.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPetDbMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPetDb)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIPetDb) Get(arg0 string) (*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPetDbMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPetDb)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockIPetDb) List(arg0 *pet.Pet, arg1, arg2 int) ([]*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPetDbMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPetDb)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockIPetDb) Update(arg0 *pet.Pet) (*pet.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*pet.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIPetDbMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPetDb)(nil).Update), arg0)
}

// MockIOwnerDb is a mock of IOwnerDb interface.
type MockIOwnerDb struct {
	ctrl     *gomock.Controller
	recorder *MockIOwnerDbMockRecorder
}

// MockIOwnerDbMockRecorder is the mock recorder for MockIOwnerDb.
type MockIOwnerDbMockRecorder struct {
	mock *MockIOwnerDb
}

// NewMockIOwnerDb creates a new mock instance.
func NewMockIOwnerDb(ctrl *gomock.Controller) *MockIOwnerDb {
	mock := &MockIOwnerDb{ctrl: ctrl}
	mock.recorder = &MockIOwnerDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOwnerDb) EXPECT() *MockIOwnerDbMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOwnerDb) Create(arg0 *pet.Owner) (*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIOwnerDbMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOwnerDb)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIOwnerDb) Delete(arg0 *pet.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIOwnerDbMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIOwnerDb)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIOwnerDb) Get(arg0 string) (*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIOwnerDbMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIOwnerDb)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockIOwnerDb) List(arg0 *pet.Owner, arg1, arg2 int) ([]*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIOwnerDbMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIOwnerDb)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockIOwnerDb) Update(arg0 *pet.Owner) (*pet.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*pet.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIOwnerDbMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIOwnerDb)(nil).Update), arg0)
}

// MockIOwnerPetDb is a mock of IOwnerPetDb interface.
type MockIOwnerPetDb struct {
	ctrl     *gomock.Controller
	recorder *MockIOwnerPetDbMockRecorder
}

// MockIOwnerPetDbMockRecorder is the mock recorder for MockIOwnerPetDb.
type MockIOwnerPetDbMockRecorder struct {
	mock *MockIOwnerPetDb
}

// NewMockIOwnerPetDb creates a new mock instance.
func NewMockIOwnerPetDb(ctrl *gomock.Controller) *MockIOwnerPetDb {
	mock := &MockIOwnerPetDb{ctrl: ctrl}
	mock.recorder = &MockIOwnerPetDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOwnerPetDb) EXPECT() *MockIOwnerPetDbMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOwnerPetDb) Create(arg0 *pet.OwnerPet) (*pet.OwnerPet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*pet.OwnerPet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIOwnerPetDbMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOwnerPetDb)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIOwnerPetDb) Delete(arg0 *pet.OwnerPet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIOwnerPetDbMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIOwnerPetDb)(nil).Delete), arg0)
}

// Query mocks base method.
func (m *MockIOwnerPetDb) Query(arg0 *pet.OwnerPet) ([]*pet.OwnerPet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].([]*pet.OwnerPet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIOwnerPetDbMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIOwnerPetDb)(nil).Query), arg0)
}
